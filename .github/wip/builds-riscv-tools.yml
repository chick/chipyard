name: chipyard-ci-process

on: [push]

env:
  tools-cache-version: v6

jobs:
  install-riscv-toolchain:
    name: install-riscv-toolchain
    runs-on: ubuntu-latest
    container:
      image: ucbbar/chipyard-ci-image:ab57b7d
      options: --user root --entrypoint /bin/bash
    env:
      JVM_OPTS: -Xmx3200m # Customize the JVM maximum heap limit
    steps:
      - name: fix permissions 1
        run: sudo chown -R riscvuser .
      - name: Checkout
        uses: actions/checkout@v2
      - name: Generate Hashes
        run: pwd && ls -ltra && .github/scripts/create-hash.sh
      - name: Show hashes
        run: shasum riscv-tools.hash
      - name: generate key
        id: genkey
        run: echo "::set-output name=tools-cache-key::riscv-tools-installed-${{ env.tools-cache-version }}-$(shasum riscv-tools.hash | cut -d' ' -f1)"
      - name: show key
        run: echo ${{ steps.genkey.outputs.tools-cache-key }}
      - uses: actions/cache@v2
        id: riscv-tools-cache
        with:
          path: riscv-tools-install
          key: riscv-tools-install-${{ steps.genkey.outputs.tools-cache-key }}
          restore-keys: riscv-tools-install-${{ steps.genkey.outputs.tools-cache-key }}
      - name: build riscv tools if not cached
        if: steps.riscv-tools-cache.outputs.cache-hit != 'true'
        run: ./.github/scripts/build-toolchains.sh riscv-tools
      #        run: |
      #          ./.github/scripts/show_fs.sh &
      #          ./.github/scripts/build-toolchains.sh riscv-tools
      #      - name: Start SSH via Ngrok
      #        if: ${{ failure() }}
      #        run: curl -sL https://gist.githubusercontent.com/retyui/7115bb6acf151351a143ec8f96a7c561/raw/7099b9db76729dc5761da72aa8525f632d8875c9/debug-github-actions.sh | bash
      #        env:
      #          # After sign up on the https://ngrok.com/
      #          # You can find this token here: https://dashboard.ngrok.com/get-started/setup
      #          # NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}
      #          NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}
      #
      #          # This password you will use when authorizing via SSH
      #          # USER_PASS: ${{ secrets.USER_PASS }}
      #          USER_PASS: ${{ secrets.USER_PASS }}
      #
